require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MenusController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Menu. As you add validations to Menu, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { nombre: 'Menu 1', fecha: Date.today }
  }

  let(:invalid_attributes) {
    { nombre: 'Menu 1', fecha: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MenusController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:usuario) { FactoryGirl.create :usuario, email: 'usuario@mail.com', password: 'hola', password_confirmation: 'hola' }
  let(:platillos) { FactoryGirl.create_list :platillo, 2 }

  before :each do
    allow(controller).to receive(:current_usuario).and_return usuario
  end

  describe "GET #index" do
    before :each do
      @menu_1 = Menu.create! valid_attributes
      @menu_2 = Menu.create! valid_attributes.merge({ fecha: Date.today - 1.months })
    end

    it "assigns current month menus as @menus" do
      get :index, {}, valid_session
      expect(assigns(:menus)).to match([@menu_1])
    end

    it "ignores filters if both dates aren't set" do
      get :index, desde: Date.today, hasta: ''
      expect(assigns(:menus)).to eq([@menu_1])
    end

    it "filters menus by date" do
      get :index, desde: (Date.today - 1.months), hasta: Date.today
      expect(assigns(:menus)).to eq([@menu_2, @menu_1])
    end
  end

  describe "GET #show" do
    it "assigns the requested menu as @menu" do
      menu = Menu.create! valid_attributes
      get :show, {:id => menu.to_param}, valid_session
      expect(assigns(:menu)).to eq(menu)
    end
  end

  describe "GET #new" do
    it "assigns a new menu as @menu" do
      get :new, {}, valid_session
      expect(assigns(:menu)).to be_a_new(Menu)
    end
  end

  describe "GET #edit" do
    it "assigns the requested menu as @menu" do
      menu = Menu.create! valid_attributes
      get :edit, {:id => menu.to_param}, valid_session
      expect(assigns(:menu)).to eq(menu)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Menu" do
        expect {
          post :create, {:menu => valid_attributes}, valid_session
        }.to change(Menu, :count).by(1)
      end

      it "assigns a newly created menu as @menu" do
        post :create, {:menu => valid_attributes}, valid_session
        expect(assigns(:menu)).to be_a(Menu)
        expect(assigns(:menu)).to be_persisted
      end

      it "associates platillos to menu" do
        platillos_ids = platillos.map &:id
        valid_attributes.merge!({ platillo_ids: platillos_ids })
        post :create, {:menu => valid_attributes}, valid_session
        expect(assigns(:menu).platillos.length).to eq 2
      end

      it "redirects to menus index" do
        post :create, {:menu => valid_attributes}, valid_session
        expect(response).to redirect_to(menus_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved menu as @menu" do
        post :create, {:menu => invalid_attributes}, valid_session
        expect(assigns(:menu)).to be_a_new(Menu)
      end

      it "re-renders the 'new' template" do
        post :create, {:menu => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { nombre: 'Menu 2', fecha: Date.today }
      }

      it "updates the requested menu" do
        menu = Menu.create! valid_attributes
        put :update, {:id => menu.to_param, :menu => new_attributes}, valid_session
        menu.reload
        expect(menu.nombre).to eq 'Menu 2'
      end

      it "assigns the requested menu as @menu" do
        menu = Menu.create! valid_attributes
        put :update, {:id => menu.to_param, :menu => valid_attributes}, valid_session
        expect(assigns(:menu)).to eq(menu)
      end

      it "redirects to menus index" do
        menu = Menu.create! valid_attributes
        put :update, {:id => menu.to_param, :menu => valid_attributes}, valid_session
        expect(response).to redirect_to(menus_path)
      end
    end

    context "with invalid params" do
      it "assigns the menu as @menu" do
        menu = Menu.create! valid_attributes
        put :update, {:id => menu.to_param, :menu => invalid_attributes}, valid_session
        expect(assigns(:menu)).to eq(menu)
      end

      it "re-renders the 'edit' template" do
        menu = Menu.create! valid_attributes
        put :update, {:id => menu.to_param, :menu => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested menu" do
      menu = Menu.create! valid_attributes
      expect {
        delete :destroy, {:id => menu.to_param}, valid_session
      }.to change(Menu, :count).by(-1)
    end

    it "redirects to the menus list" do
      menu = Menu.create! valid_attributes
      delete :destroy, {:id => menu.to_param}, valid_session
      expect(response).to redirect_to(menus_url)
    end
  end

  describe 'POST enviar' do
    before :each do
      @menu_1 = Menu.create! valid_attributes
      @menu_2 = Menu.create! valid_attributes.merge({ fecha: Date.today + 10.days })
    end

    context 'success' do
      it 'redirects to menus index' do
        post :enviar, envio: { desde: Date.today, hasta: (Date.today + 5.days), email: 'maestra@escuelita.com' }
        expect(response).to redirect_to menus_path
      end

      it 'shows a success message' do
        post :enviar, envio: { desde: Date.today, hasta: (Date.today + 5.days), email: 'maestra@escuelita.com' }
        expect(flash[:notice]).to match /Los men√∫s han sido enviados exitosamente/
      end

      it 'delivers an email' do
        expect{
          post :enviar, envio: { desde: Date.today, hasta: (Date.today + 5.days), email: 'maestra@escuelita.com' }
        }.to change{ ActionMailer::Base.deliveries.count }.by 1
      end
    end

    context 'error' do
      it 'renders generar_envio template' do
        post :enviar, envio: { desde: Date.today, hasta: (Date.today + 5.days) }
        expect(response).to render_template 'generar_envio'
      end
    end
  end

end
